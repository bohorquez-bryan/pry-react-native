import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View,
  SafeAreaView,
  Image,
  TouchableHighlight,
  ScrollView,
  TextInput,
  Picker,
  Alert
} from 'react-native';
//import {Input} from 'react-native-elements';
import Voice from 'react-native-voice';

const BaseInput = ({ style, children, label }) => (
  <View style={[styles.baseInput, style]}>
    <Text>{label}</Text>
    {children}
  </View>
);
const AppInput = ({ children, value, onChange, ...props }) => (
  <BaseInput {...props}>
    <TextInput value={value} onChangeText={onChange} />
  </BaseInput>
);

export default class Page2 extends Component {
  
    constructor(props) {
    super(props);
    //Setting callbacks for the process status
    Voice.onSpeechStart = this.onSpeechStart;
    Voice.onSpeechEnd = this.onSpeechEnd;
    Voice.onSpeechError = this.onSpeechError;
    Voice.onSpeechResults = this.onSpeechResults;
    Voice.onSpeechPartialResults = this.onSpeechPartialResults;
    Voice.onSpeechVolumeChanged = this.onSpeechVolumeChanged;

    this.state = {
      pitch: '',
      error: '',
      end: '',
      started: '',
      results: [],
      partialResults: [],
      text:'',
    };

    this.handleChange = this.handleChange.bind(this);
  }

  handleChange (e) {
    const text = e.target.text;
    const value = e.target.value;
    this.setState({
      [text]: value
    })
  };

  onChangeText = (text) =>{
    const newtext = text;
    this.setState({text: newtext})
  }

  componentWillUnmount() {
    //destroy the process after switching the screen
    Voice.destroy().then(Voice.removeAllListeners);
  }

  onSpeechStart = e => {
    //Invoked when .start() is called without error
    console.log('onSpeechStart: ', e);
    this.setState({
      started: '√',
    });
  };

  onSpeechEnd = e => {
    //Invoked when SpeechRecognizer stops recognition
    console.log('onSpeechEnd: ', e);
    this.setState({
      end: '√',
    });
  };

  onSpeechError = e => {
    //Invoked when an error occurs.
    console.log('onSpeechError: ', e);
    this.setState({
      error: JSON.stringify(e.error),
    });
  };

  onSpeechResults = e => {
    //Invoked when SpeechRecognizer is finished recognizing
    console.log('onSpeechResults: ', e);
    this.setState({
      text: e.value,
    });
  };

  onSpeechPartialResults = e => {
    //Invoked when any results are computed
    console.log('onSpeechPartialResults: ', e);
    this.setState({
      partialResults: e.value,
    });
  };

  onSpeechVolumeChanged = e => {
    //Invoked when pitch that is recognized changed
    console.log('onSpeechVolumeChanged: ', e);
    this.setState({
      pitch: e.value,
    });
  };

  _startRecognizing = async () => {
    //Starts listening for speech for a specific locale
    this.setState({
      pitch: '',
      error: '',
      started: '',
      results: [],
      partialResults: [],
      end: '',
      text: '',
    });

    try {
      await Voice.start('es-ES');
    } catch (e) {
      //eslint-disable-next-line
      console.error(e);
    }
  };

  _stopRecognizing = async () => {
    //Stops listening for speech
    try {
      await Voice.stop();
    } catch (e) {
      //eslint-disable-next-line
      console.error(e);
    }
  };

  _cancelRecognizing = async () => {
    //Cancels the speech recognition
    try {
      await Voice.cancel();
    } catch (e) {
      //eslint-disable-next-line
      console.error(e);
    }
  };

  _destroyRecognizer = async () => {
    //Destroys the current SpeechRecognizer instance
    try {
      await Voice.destroy();
    } catch (e) {
      //eslint-disable-next-line
      console.error(e);
    }
    this.setState({
      pitch: '',
      error: '',
      started: '',
      results: [],
      partialResults: [],
      end: '',
      text:'',
    });
  };
 
  render() {
    const {text} = this.state;
         return (
      <SafeAreaView style={{ flex: 1 }}>
        <View style={styles.container}>
          <View
            style={{
              flexDirection: 'row',
              justifyContent: 'space-between',
              paddingVertical: 10,
            }}>
            <Text
              style={{
                flex: 1,
                textAlign: 'center',

              }}>{`Comienza: ${this.state.started}`}</Text>
            <Text
              style={{
                flex: 1,
                textAlign: 'center',

              }}>{`Termina: ${this.state.end}`}</Text>
          </View>
          <View
            style={{
              flexDirection: 'row',
              justifyContent: 'space-between',
              paddingVertical: 10,
            }}>
            <Text
              style={{
                flex: 1,
                textAlign: 'center',

              }}>{`Tono \n ${this.state.pitch}`}</Text>
            <Text
              style={{
                flex: 1,
                textAlign: 'center',

              }}>{`Error \n ${this.state.error}`}</Text>
          </View>
          <TouchableHighlight
            onPress={this._startRecognizing}
            style={{ marginVertical: 20 }}>
            <Image
              style={styles.button}
              source={{
                uri:
                  'https://raw.githubusercontent.com/AboutReact/sampleresource/master/microphone.png',
              }}
            />
          </TouchableHighlight>
          <ScrollView>
          <Text
            style={{
              textAlign: 'center',
              color: '#B0171F',
              marginBottom: 1,
              fontWeight: '700',
            }}>Resultado: {text}
            
          </Text>
          </ScrollView>
          <ScrollView>
          <TextInput 
                //style={{height: 40, borderColor: 'gray', borderWidth: 1, marginBottom: 1}}
                value={this.state.text}
                onChangeText={this.onChangeText}
                //value={text}
                />
          </ScrollView>  
          <ScrollView>
            {this.state.partialResults.map((text, index) => {
              return (
                <TextInput key={`${index}`}
                style={{height: 40, borderColor: 'gray', borderWidth: 1, marginBottom: 1}}
                onChangeText={(text) => this.setState({text})}
                value={text}
                />
              );
            })}
          </ScrollView>
          
          <Text  style={styles.stat}> </Text>
            <View
            style={{
              flexDirection: 'row',
              alignItems: 'space-between',
              position: 'absolute',
              bottom: 0,
            }}>
            <TouchableHighlight
              onPress={this._stopRecognizing}
              style={{ flex: 1, backgroundColor: 'blue' }}>
              <Text style={styles.action}>Detener</Text>
            </TouchableHighlight>
            <TouchableHighlight
              onPress={this.editText}
              style={{ flex: 1, backgroundColor: 'blue' }}>
              <Text style={styles.action}>Editar</Text>
            </TouchableHighlight>
            <TouchableHighlight
              onPress={this._destroyRecognizer}
              style={{ flex: 1, backgroundColor: 'blue' }}>
              <Text style={styles.action}>Eliminar</Text>
            </TouchableHighlight>
          </View>
        </View>
      </SafeAreaView>
    );
  }
}

const styles = StyleSheet.create({
  button: {
    width: 50,
    height: 50,
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  welcome: {
    fontSize: 20,
    textAlign: 'center',
    margin: 10,
  },
  action: {
    width: '100%',
    textAlign: 'center',
    color: 'white',
    paddingVertical: 8,
    marginVertical: 5,
    fontWeight: 'bold',
  },
  instructions: {
    textAlign: 'center',
    marginBottom: 5,
  },
  stat: {
    textAlign: 'center',
    color: '#B0171F',
    marginBottom: 1,
    marginTop: 30,
  },
});
